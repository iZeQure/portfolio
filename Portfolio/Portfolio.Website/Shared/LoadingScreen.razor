@inherits ThemeLayoutModule
@inject IStringLocalizer<MainLayout> MainLayoutLoc
@inject IStringLocalizer<LoadingScreen> Loc
@inject IJSRuntime _js

@if (_isLoaded)
{
    @ChildContent
}
else
{
    <HeadContent>
        <PageTitle>@Loc["Message"] - @MainLayoutLoc["Name"]</PageTitle>
    </HeadContent>

    <div class="loading-container @(ColorThemeCssClass)">
        <h1>@MainLayoutLoc["Name"]</h1>
        <div class="loading-content">
            <div class="spinner-border" role="status"></div>
            <span>@Loc["Message"]</span>
        </div>
        <span>@_message . . .</span>
    </div>
}

@code {
    private Random _rnd = new(DateTime.Now.GetHashCode());
    private Task<IJSObjectReference> _storageModule;
    private bool _isLoaded = false;
    private string _message;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public Task<IJSObjectReference> StorageModule => _storageModule ??= _js.InjectJsObjectReference("import", "./js/default-storage.js");

    protected override async Task OnInitializedAsync()
    {
        await ConfigureDefaultTheme();

        _isLoaded = true;
    }

    private async Task ConfigureDefaultTheme()
    {
        _message = "Configuring default theme";

        await Task.Delay(1000);

        IJSObjectReference module = await StorageModule;

        await module.InvokeVoidAsync("setDefaultTheme");
    }
}
