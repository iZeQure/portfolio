@inject IJSRuntime JS
@inject NavigationManager Nav
@inject IStringLocalizer<LanguageSelector> Localizer

<select @bind="Culture" class="form-select form-select-sm" aria-label="@Localizer["CultureSelectAriaLabel"]">
    @foreach (var culture in supportedLanguages)
    {
        <option value="@culture.Code">@culture.DisplayName</option>
    }
</select>

@code {
    private IJSObjectReference module;

    private List<LanguageModel> supportedLanguages;

    protected override Task OnInitializedAsync()
    {


        supportedLanguages = new()
            {
                new LanguageModel { Code = "da-DK", DisplayName = "Dansk" },
                new LanguageModel { Code = "en-US", DisplayName = "English" }
            };

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/culture-settings.js");
        }
    }

    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            try
            {
                if (CultureInfo.CurrentCulture != value)
                {
                    _ = Task.Run(async () => await module.InvokeVoidAsync("setCulture", value.Name));

                    Nav.NavigateTo(Nav.Uri, forceLoad: true);
                }
            }
            // Ignore Exceptions
            catch (Exception) { }
        }
    }
}
