@inherits ThemeLayoutModule
@inject IJSRuntime _js
@inject IStringLocalizer<MainLayout> _localizer
@inject ILogger<MainLayout> _logger
@inject NavigationManager _navigation

<HeadContent>
    <GoogleSearchEngineMeta Title="@Name" Description="@Description" />
    <FacebookMeta Title="@(Name)" Description="@(Description)" Url="@(Url)" />
    <TwitterMeta Title="@(Name)" Description="@(Description)" Url="@(Url)" />
</HeadContent>

<main class="page @(ColorThemeCssClass)">
    <SidebarNav>
        <div id="theme-tooltip" class="theme-toggle" @onclick="@ToggleTheme" data-bs-toggle="tooltip" data-bs-placement="top" title="@TooltipTitle" data-bs-original-title="@TooltipTitle">
            <div class="sun sun-logo @(!IsDarkTheme ? "animate-sun" : "")">
                <span class="icon"><i class="fas fa-sun"></i></span>
            </div>
            <div class="moon moon-logo @(IsDarkTheme ? "" : "animate-moon")">
                <span class="icon"><i class="fas fa-moon"></i></span>
            </div>
        </div>
    </SidebarNav>

    <div class="content container-fluid">
        @Body
    </div>
</main>

@code {
    private Task<IJSObjectReference> _documentModule;

    private Task<IJSObjectReference> DocumentModule => _documentModule ??= _js.InjectJsObjectReference("import", "./js/document-settings.js");
    private string Name => _localizer["Name"];
    private string Description => _localizer["Description"];
    private string Url => _navigation.Uri;

    protected override async Task OnInitializedAsync()
    {
        await GetTheme();
        await SetDocumentLangCode();
    }

    async Task SetDocumentLangCode()
    {
        try
        {
            var module = await DocumentModule;
            await module.InvokeVoidAsync("setDocumentLangCode");
        }
        catch (Exception)
        {
            _logger.LogError("Error occurred while setting lang code.");
        }
    }
}
